/**
 * MEN√ö PERSONALIZADO Y TRIGGERS
 * Interfaz de usuario y automatizaci√≥n
 */

/**
 * Crea el men√∫ personalizado al abrir la hoja
 */
function onOpen(e) {
  const ui = SpreadsheetApp.getUi();
  ui.createMenu('üîÑ Sincronizador')
    .addItem('üöÄ Inicializar Sistema', 'inicializarSistema')
    .addSeparator()
    .addItem('‚ñ∂Ô∏è Ejecutar Sincronizaci√≥n Manual', 'ejecutarSincronizacionManual')
    .addSeparator()
    .addItem('‚ûï Crear Nuevo Gu√≠a', 'crearNuevoGuiaUI')
    .addItem('üîß Configurar Calendar ID', 'configurarCalendarIdUI')
    .addSeparator()
    .addItem('‚è∞ Instalar Trigger Autom√°tico', 'instalarTriggerAutomatico')
    .addItem('üóëÔ∏è Eliminar Triggers', 'eliminarTodosLosTriggers')
    .addToUi();
}

/**
 * Ejecuta sincronizaci√≥n manual desde el men√∫
 */
function ejecutarSincronizacionManual() {
  const ui = SpreadsheetApp.getUi();
  const respuesta = ui.alert(
    'Sincronizaci√≥n Manual',
    '¬øDesea ejecutar la sincronizaci√≥n ahora?',
    ui.ButtonSet.YES_NO
  );
  
  if (respuesta === ui.Button.YES) {
    try {
      ejecutarSincronizacion();
      ui.alert('Sincronizaci√≥n completada exitosamente');
    } catch (error) {
      ui.alert('Error en sincronizaci√≥n: ' + error.toString());
    }
  }
}

/**
 * Instala el trigger autom√°tico de tiempo
 */
function instalarTriggerAutomatico() {
  const ui = SpreadsheetApp.getUi();
  
  // Verificar si ya existe un trigger
  const triggers = ScriptApp.getProjectTriggers();
  const triggerExistente = triggers.find(t => 
    t.getHandlerFunction() === CONFIG.TRIGGER_FUNCTION
  );
  
  if (triggerExistente) {
    const respuesta = ui.alert(
      'Trigger Existente',
      'Ya existe un trigger autom√°tico. ¬øDesea reemplazarlo?',
      ui.ButtonSet.YES_NO
    );
    
    if (respuesta === ui.Button.NO) {
      return;
    }
    
    ScriptApp.deleteTrigger(triggerExistente);
  }
  
  // Crear nuevo trigger
  ScriptApp.newTrigger(CONFIG.TRIGGER_FUNCTION)
    .timeBased()
    .everyMinutes(CONFIG.TRIGGER_INTERVAL_MINUTES)
    .create();
  
  ui.alert(
    '‚úÖ Trigger Instalado',
    `La sincronizaci√≥n se ejecutar√° autom√°ticamente cada ${CONFIG.TRIGGER_INTERVAL_MINUTES} minuto(s).`,
    ui.ButtonSet.OK
  );
}

/**
 * Elimina todos los triggers del proyecto
 */
function eliminarTodosLosTriggers() {
  const ui = SpreadsheetApp.getUi();
  const respuesta = ui.alert(
    'Eliminar Triggers',
    '¬øEst√° seguro que desea eliminar todos los triggers autom√°ticos?',
    ui.ButtonSet.YES_NO
  );
  
  if (respuesta === ui.Button.YES) {
    const triggers = ScriptApp.getProjectTriggers();
    triggers.forEach(trigger => ScriptApp.deleteTrigger(trigger));
    ui.alert('Todos los triggers han sido eliminados');
  }
}

/**
 * Configura el Calendar ID del maestro
 */
function configurarCalendarIdUI() {
  const ui = SpreadsheetApp.getUi();
  
  const calendarIdActual = obtenerCalendarIdMaestro() || '(No configurado)';
  
  const respuesta = ui.prompt(
    'Configurar Calendar ID',
    `Calendar ID actual: ${calendarIdActual}\n\nIngrese el nuevo Calendar ID:`,
    ui.ButtonSet.OK_CANCEL
  );
  
  if (respuesta.getSelectedButton() === ui.Button.OK) {
    const nuevoId = respuesta.getResponseText().trim();
    
    if (nuevoId) {
      establecerCalendarIdMaestro(nuevoId);
      ui.alert('Calendar ID configurado correctamente');
    } else {
      ui.alert('Debe ingresar un Calendar ID v√°lido');
    }
  }
}